#+TITLE: Upgrading the best python shell (IPython) with the best editor
#+AUTHOR: Evan Misshula

* Introduction
** According to Wikipedia:
   A [[http://en.wikipedia.org/wiki/Unix_shell][Unix shell]] is a command-line interpreter or shell that provides a
   traditional user interface for the Unix operating system and for
   Unix-like systems. Users direct the operation of the computer by
   entering commands as text for a command line interpreter to execute,
   or by creating text scripts of one or more such commands. Users
   typically interact with a Unix shell using a terminal emulator,
   however, direct operation via serial hardware connections, or
   networking session, are common for server systems
** History outline
*** Bourne shell
**** Stephen Bourne at AT&T
     - introduced piping, here documents, command substitution,
       variables, control structures for condition-testing and looping
       and filename wildcarding
     - influenced by Algol 68
*** C shell
**** Bill Joy at Berkley
     - ncluding the history and editing mechanisms, aliases, directory
       stacks, tilde notation, cdpath, job control and path hashing.
     - influenced by C
* Concept
  - The Unix shell introduced new concepts for operating systems. It
    is both an interactive command language as well as a scripting
    programming language, and is used by the operating system as the
    facility to control (shell script) the execution of the
    system. Shells created for other operating systems than Unix,
    often provide similar functionality.
  - If you have a windowing system new users may not use the shell
  - GUI's (GNOME, KDE, and Xfce) can be thought of as  visual or
    graphical shells.
  - Recent change to the init proceedure has replaced shell with
    systemd.  There is controversy in kernel space.

* Compatible shells
** Bourne shell compatible

    - Bourne shell (sh): Written by Steve Bourne, while at Bell
      Labs. First distributed with Version 7 Unix, circa 1978, and
      enhanced over the years.
    - Almquist shell (ash): Written as a BSD-licensed replacement for
      the Bourne Shell; often used in resource-constrained
      environments. The sh of FreeBSD, NetBSD (and their derivatives)
      are based on ash that has been enhanced to be POSIX conformant
      for the occasion.
    - Bourne-Again shell (bash): Written as part of the GNU Project to
      provide a superset of Bourne Shell functionality. This shell can
      be found installed and is the default interactive shell for
      users on most GNU/Linux and Mac OS X systems.
    - Debian Almquist shell (dash): A modern replacement for ash in
      Debian and Ubuntu.
    - Korn shell (ksh): Written by David Korn, while at Bell Labs.
    - Public domain Korn shell (pdksh): Descendant of ksh.
    - MirBSD Korn shell (mksh): Descendant of the OpenBSD /bin/ksh and
      pdksh, developed as part of MirOS BSD.
    - Z shell (zsh): A relatively modern shell that is backward
      compatible with bash.  Busybox: Tiny utilities for small and
      embedded systems, include a shell.

** C shell compatible

    - C shell (csh): Written by Bill Joy, while at the University of
      California, Berkeley. First distributed with BSD in 1978.[2]
    - TENEX C shell (tcsh)
    - Hamilton C shell: Written by Nicole Hamilton, first distributed
      on OS/2 in 1988 and on Windows since 1992.[3]

** exotic

    - es: A functional programming rc-compatible shell written in the
      mid-1990s.
    - Friendly interactive shell (fish): First released in 2005.
    - Perl Shell (psh): A shell for Unix-like and Windows operating
      systems, combining aspects of bash (and other Unix shells) with
      the power of the Perl scripting language.
    - pysh: A special profile of the IPython project, tries to
      integrate a heavily enhanced Python shell and system shell into
      a seamless experience.
    - rc: The default shell on Plan 9 from Bell Labs and Version 10
      Unix written by Tom Duff. Ports have been made to various
      Unix-like operating systems.
    - scsh, a Scheme Shell.
    - wish: A windowing shell for Tcl/Tk.
    - zoidberg: A modular Perl shell written, configured, and operated
      entirely in Perl.
* Emacs eShell
  - shell written in lisp
  - Any tool you use often deserves the time spent learning to master it.
** My experience extremely valuable 
   - capturing error msgs
   - searching output
*** Drawbacks
   - when installing complicated programs postgres, qgis apt-get is
     not able to configure in the eShell
* R console and Emacs-Speaks-Statistics
  1. The rationale for developing ESS is that most statistical analysis
     systems provide a more or less sophisticated graphical user
     interface (GUI). However, their full power is only available using
     their scripting language. 
  2. Complex statistical analysis projects require a high degree of
     automation and documentation which can only be handled by creating
     statistical analysis scripts.
  3. Many statistics packages provide only weak text editor
     functionality and show major differences between them.
  4. Without a unified text editor user interface additional effort is
     required from the user to cope with limited functionality and with
     text editor differences.

 
